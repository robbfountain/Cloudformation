AWSTemplateFormatVersion: 2010-09-09
Description: "Creates a network VPC deployment with 2 or 3 availability zones."

Parameters:
  VPCName: 
    Type: "String"
    Description: "The name of the VPC. Lowercase letters only. (Ex: vpc01)"
    Default: vpc01

  Purpose: 
    Type: "String"
    Description: "The name of this environment."
    Default: poc

  NumberOfAZs:
    AllowedValues:
    - '2'
    - '3'
    Default: 3
    Description: "Number of Availibility Zones to utilize in your VPC"
    Type: "String"

  CidrVPC: 
    Type: "String"
    Description: "CIDR range to use for the VPC"
    Default: 192.168.0.0/16

  CidrPubSubnetA: 
    Type: "String"
    Description: "CIDR range to use for the public subnet in availability zone A. It must fall within the VPC CIDR"
    Default: 192.168.2.0/23

  CidrPubSubnetB: 
    Type: "String"
    Description: "CIDR range to use for the public subnet in availability zone B. It must fall within the VPC CIDR"
    Default: 192.168.4.0/23

  CidrPubSubnetC: 
    Type: "String"
    Description: "CIDR range to use for the public subnet in availability zone C. It must fall within the VPC CIDR"
    Default: 192.168.6.0/23

  CidrPriSubnetA: 
    Type: "String"
    Description: "CIDR range to use for the private subnet in availability zone A. It must fall within the VPC CIDR"
    Default: 192.168.8.0/23

  CidrPriSubnetB: 
    Type: "String"
    Description: "CIDR range to use for the private subnet in availability zone B. It must fall within the VPC CIDR"
    Default: 192.168.10.0/23

  CidrPriSubnetC: 
    Type: "String"
    Description: "CIDR range to use for the private subnet in availability zone C. It must fall within the VPC CIDR"
    Default: 192.168.12.0/23

Mappings:
  RegionMap:
    us-east-1:
      a: "us-east-1a"
      b: "us-east-1b"
      c: "us-east-1c"
      d: "us-east-1d"
      e: "us-east-1e"
      f: "us-east-1f"
    us-west-2:
      a: "us-west-2a"
      b: "us-west-2b"
      c: "us-west-2c"
      d: "us-west-2d"

Conditions:
  CreateThreeAZ: !Equals [!Ref NumberOfAZs, '3']

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CidrVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value:  !Join [ "-", [ !Ref Purpose , !Ref VPCName] ]
  
  ProductionDHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose , !Ref VPCName, "-dhcp" ] ]

  ProductionDHCPAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref ProductionDHCPOptions
      VpcId: !Ref VPC

  PriSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, a ]
      CidrBlock: !Ref CidrPriSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pri-a" ] ]
      VpcId: !Ref VPC

  PriSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, b ]
      CidrBlock: !Ref CidrPriSubnetB
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pri-b" ] ]
      VpcId: !Ref VPC

  PriSubnetC:
    Type: "AWS::EC2::Subnet"
    Condition: CreateThreeAZ
    Properties:
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, c ]
      CidrBlock: !Ref CidrPriSubnetC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pri-c" ] ]
      VpcId: !Ref VPC

  PubSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, a ]
      CidrBlock: !Ref CidrPubSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pub-a" ] ]
      VpcId: !Ref VPC

  PubSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, b ]
      CidrBlock: !Ref CidrPubSubnetB
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pub-b" ] ]
      VpcId: !Ref VPC

  PubSubnetC:
    Type: "AWS::EC2::Subnet"
    Condition: CreateThreeAZ
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [ RegionMap, !Ref AWS::Region, c ]
      CidrBlock: !Ref CidrPubSubnetC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pub-c" ] ]
      VpcId: !Ref VPC

  PriACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, !Ref VPCName, "pri-acl" ] ]
      VpcId: !Ref VPC
  
  NACLPriIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref CidrVPC
      Egress: false
      NetworkAclId: !Ref PriACL
      PortRange:
        From: 0
        To: 65535
      Protocol: -1 
      RuleAction: allow 
      RuleNumber: 100 

  NACLPriEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PriACL
      PortRange:
        From: 0
        To: 65535
      Protocol: -1 
      RuleAction: allow 
      RuleNumber: 100

  PubACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, !Ref VPCName, "pub-acl" ] ]
      VpcId: !Ref VPC

  NACLPubIngress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PubACL
      PortRange:
        From: 22
        To: 22
      Protocol: -1 
      RuleAction: allow 
      RuleNumber: 100 

  NACLPubIngress200:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PubACL
      PortRange:
        From: 389
        To: 389
      Protocol: -1 
      RuleAction: allow 
      RuleNumber: 100 

  NACLPubEgress100:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PubACL
      PortRange:
        From: 0
        To: 65535
      Protocol: -1 
      RuleAction: allow 
      RuleNumber: 100

  PriNaclAssocSubnetA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PriACL
      SubnetId: !Ref PriSubnetA

  PriNaclAssocSubnetB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PriACL
      SubnetId: !Ref PriSubnetB

  PriNaclAssocSubnetC:
    Condition: CreateThreeAZ
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PriACL
      SubnetId: !Ref PriSubnetC

  PubNaclAssocSubnetA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref PubSubnetA

  PubNaclAssocSubnetB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref PubSubnetB

  PubNaclAssocSubnetC:
    Condition: CreateThreeAZ
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref PubSubnetC

  RouteTablePri:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pri", !Ref VPCName, "routetable" ] ]
      VpcId: !Ref VPC

  RouteTablePub:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref Purpose, "pub", !Ref VPCName, "routetable" ] ]
      VpcId: !Ref VPC
  
  PriRouteTableAssocSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePri
      SubnetId: !Ref PriSubnetA

  PriRouteTableAssocSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePri
      SubnetId: !Ref PriSubnetB

  PriRouteTableAssocSubnetC:
    Condition: CreateThreeAZ
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePri
      SubnetId: !Ref PriSubnetC

  PubRouteTableAssocSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref PubSubnetA

  PubRouteTableAssocSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref PubSubnetB
  
  PubRouteTableAssocSubnetC:
    Condition: CreateThreeAZ
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref PubSubnetC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteConnectivityExternal:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePub
   
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref RouteTablePri
        - !Ref RouteTablePub
      ServiceName: !Join [ "", [ "com.amazonaws.", !Ref AWS::Region, ".s3" ] ]
      VpcId: !Ref VPC
  
  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NAT:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PubSubnetA
 
  Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
      RouteTableId: !Ref RouteTablePri
      
Outputs:
  VpcId: 
    Description: VPC Id,
    Value: !Ref VPC

  PriSubnetA: 
    Description: Private Subnet A ID,
    Value: !Ref PriSubnetA
    
  PriSubnetB: 
    Description: Private Subnet B ID,
    Value: !Ref PriSubnetB

  PriSubnetC: 
    Condition: CreateThreeAZ
    Description: Private Subnet C ID,
    Value: !Ref PriSubnetC
      
  PubSubnetA: 
    Description: Public Subnet A ID,
    Value: !Ref PubSubnetA

  PubSubnetB: 
    Description: Public Subnet B ID,
    Value: !Ref PubSubnetB
  
  PubSubnetC:
    Condition: CreateThreeAZ 
    Description: Public Subnet C ID,
    Value: !Ref PubSubnetC

  RouteTablePri: 
    Description: Private Subnet Route Table,
    Value: !Ref RouteTablePri

  RouteTablePub: 
    Description: Public Subnet Route Table,
    Value: !Ref RouteTablePub
